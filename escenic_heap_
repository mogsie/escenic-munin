#!/bin/bash

: <<=cut
=head1 NAME

escenic_heap - Munin plugin to show the heap usage of instances of Escenic
Content Engine

=head1 APPLICABLE SYSTEMS

escenic_heap works with all installations of Escenic Content Engine 5.1
and onwards.  It uses the pidfiles located in /var/run/escenic/ to locate
different instances of Content Engine and graphs their heaps individually.

=head1 CONFIGURATION

escenic_heap needs to know which instance it will run on.  Since 5.1,
ECE out of the box allows easy configuration of several instances.  These
end up putting their pidfiles in /var/run/escenic/ece-xxx.pid.  If you
do not specify pidfiles, the instance name 'default' is used.

The plugin uses the jstat utility from the JVM which it assumes is available
under /etc/alternatives/jstat.  jstat itself must execute as the same user
that owns the process being monitored, which means that the plugin itself
must be run as that user.

   [escenic_heap_*]
         user escenic

=head1 INTERPRETATION

The graph itself tries to visualize the entire heap in three distinct areas:

The bottom area (green) indicates the size of the young generation, which
consists of "eden", "survivor0" and "survivor1".

The middle area (red) indicates the size of the old generation, which
consists of objects that survived being in the young generation for a while.

The top area (orange) indicates the size of the permanent generation, which
consists of classes and other things.

The -Xmx parameter controls the size of the young and the old generation, so
the top of the free space of the old generation should correspond exactly
with the value of -XMx.  The capacity of the permanent generation is usually
controlled via the proprietary -XX:MaxPermSize parameter.

The graph

=head1 MAGIC MARKERS

    #%# family=auto contrib
    #%# capabilities=autoconf suggest

=head1 CONFIGURATION

There are a few options that can be specified to control how a particular
instance of this works, if you run a non-standard setup, e.g. pidfiles in
other locations, etc.

    jstatbin     - path to jstat executable. Defaults to
                   '/etc/alternatives/jstat'

    ece_instance - name of instance. Defaults to output of 'suggest'
                   The instance names is used to group and title graphs,
                   and to locate the pidfile

    pidfile      - Override name of pidfile to use. Defaults to
                   '/var/run/escenic/ece-${ece_instance}.pid'

    graphtitle   - if unspecified, the graph title is appended with the
                   name of the instance.

=cut


graph_update=yes
jstatbin=${jstatbin:-$(which jstat)}
tmp_ece_instance=$(echo $(basename $0) | sed s,escenic_heap_,,)
ece_instance=${ece_instance:-${tmp_ece_instance}}
tmp_pidfile="/var/run/escenic/ece-${ece_instance}.pid"
pidfile=${pidfile:-${tmp_pidfile}}

if [ ! -r "$jstatbin" ] ; then
  graph_info="$graph_info NOTE: jstat ($jstatbin) is not executable, so I can't output a graph."
  graph_update=no
fi

if [ ! -r "$pidfile" ] ; then
  graph_info="$graph_info NOTE: pidfile $pidfile is not readable, so I can't output a graph."
  graph_update=no
fi

if [ -r "${pidfile}" ] ; then
  owner_uid="$[$(ps -o uid= $(cat ${pidfile}))]"
  my_id="$[$(id -u)]"

  if [ "$my_id" == "0" -o "$owner_uid" != "$my_id" ] ; then
    graph_info="$graph_info NOTE: pid is owned by a different user ${owner_uid} than me ${my_id}.  So I can't run jstat to talk to it."
    graph_update=no
  fi
fi

if [ -z "${graphtitle}" ]; then
  graphtitle="${ece_instance}"
fi

config()
{
  echo "graph_title $graphtitle Heap Usage"
  echo "graph_args --base 1024 -l 0"
  echo "graph_vlabel bytes"
  echo "graph_info Heap Usage split by different blocks of heap" ${graph_info}
  echo "graph_category Escenic"
  echo "update ${graph_update}"
  echo "graph_order Eden_Used Survivor0_Used Survivor1_Used Survivor_Used Young_Limit Young_Free Old_Used Old_Limit Old_Free Permanent_Used Permanent_Limit Permanent_Free"

  echo "Eden_Used.label Eden_Used"
  echo "Eden_Used.draw AREA"
  echo "Eden_Used.info New objects are always allocated here"
  echo "Eden_Used.colour 00cd00" # green3

  echo "Survivor0_Used.label Survivor0_Used"
  echo "Survivor0_Used.graph no"

  echo "Survivor1_Used.label Survivor1_Used"
  echo "Survivor1_Used.graph no"

  echo "Survivor_Used.label Survivor_Used"
  echo "Survivor_Used.draw STACK"
  echo "Survivor_Used.colour 008b00" # green4
  echo "Survivor_Used.info When Eden is full, Eden is garbage collected and survivors are placed in the Survivor area"
  echo "Survivor_Used.cdef Survivor0_Used,Survivor1_Used,+"

  echo "Young_Limit.label Young_Limit"
  echo "Young_Limit.graph no"  # Don't show the "limit" as-is, since it's not useful.

  echo "Young_Free.label Young_Free"
  echo "Young_Free.draw STACK"  # Should equate Young_limit always.
  echo "Young_Free.colour f0f8ff" # alice blue
  echo "Young_Free.cdef Young_Limit,Eden_Used,Survivor0_Used,Survivor1_Used,+,+,-"

  echo "Old_Used.label Old_Used"
  echo "Old_Used.draw STACK"
  echo "Old_Used.colour ff4040" # brown1
  echo "Old_Used.info When Survivor is full, Survivor is garbage collected and survivors are placed in the Old area"

  echo "Old_Limit.label Old_Limit"
  echo "Old_Limit.graph no"

  echo "Old_Free.label Old_Free"
  echo "Old_Free.draw STACK"
  echo "Old_Free.colour f0f8ff" # AliceBlue
  echo "Old_Free.cdef Old_Limit,Old_Used,-"

  echo "Permanent_Limit.label Permanent_Limit"
  echo "Permanent_Limit.graph no"

  echo "Permanent_Used.label Permanent Used"
  echo "Permanent_Used.draw STACK"
  echo "Permanent_Used.colour ff7f00"
  echo "Permanent_Used.info Permanent space is only used for permanent type objects, like class loaders, classes and so on."

  echo "Permanent_Free.label Permanent Free"
  echo "Permanent_Free.draw STACK"
  echo "Permanent_Free.colour f0f8ff"

  echo "Permanent_Free.cdef Permanent_Limit,Permanent_Used,-"
  #echo "Permanent_Limit.cdef"

}

jstat()
{
${jstatbin} -gc ${pid} | tail -n 1 | awk \
'{\
	S0C = $1; \
	S1C = $2; \
	S0U = $3; \
	S1U = $4; \
	EC  = $5; \
	EU  = $6; \
	OC  = $7; \
	OU  = $8; 
	PC  = $9; \
	PU  = $10; \
	\
	S0F = S0C - S0U; \
	S1F = S1C - S1U; \
	EF  = EC  - EU;  \
	OF  = OC  - OU;  \
	PF  = PC  - PU;  \
	\
	printf "Eden_Used.value %d\n",EU * 1024; \
	printf "Survivor0_Used.value %d\n",S0U * 1024; \
	printf "Survivor1_Used.value %d\n", S1U * 1024; \
	printf "Old_Used.value %d\n", OU * 1024; \
	printf "Permanent_Used.value %d\n", PU * 1024; \
}'

${jstatbin} -gccapacity ${pid} | tail -n 1 | awk \
'{\
 //NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC      PGCMN    PGCMX     PGC       PC     YGC    FGC 
 //21056.0 337216.0  41792.0 7552.0 8000.0  25792.0    42176.0   674496.0    73216.0    73216.0  21248.0  86016.0  75392.0  75392.0     72     3
        NGCMX = $2; \
        OGCMX = $8; \
        PGCMX = $12; \
	printf "Young_Limit.value %d\n", NGCMX * 1024; \
	printf "Old_Limit.value %d\n", OGCMX * 1024; \
	printf "Permanent_Limit.value %d\n", PGCMX * 1024; \
}'

}

#
# autoconf
#

if [ "$1" = "autoconf" ]; then

  if [ ! -x "${jstatbin}" ]; then
    echo "no (No jstat found)"
    exit 0
  fi

  if [ "$(ls 2>/dev/null /var/run/escenic/ece-*.pid | wc -l)" == "0" ]; then
    echo "no (No escenic pidfiles in /var/run/escenic/ece-*.pid)"
    exit 0
  fi

  echo "yes"
  exit 0
fi


#
# suggest
#

if [ "$1" = "suggest" ]; then

  for a in /var/run/escenic/ece-*.pid ; do
    basename $a .pid | sed s/^ece-//
  done

  exit 0
fi


#
# config
#
if [ "$1" = "config" ]; then
  config
  exit 0
fi

#
# Main
#
pid=$(cat ${pidfile})

jstat
